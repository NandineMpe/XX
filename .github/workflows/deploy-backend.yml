name: Deploy Backend

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - '**/*.py'
      - '.github/workflows/deploy-backend.yml'
      - 'infra/cdk/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (dev|staging|prod)'
        required: true
        default: 'staging'

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: '778185677217'
  ECR_REPOSITORY: augentik-backend
  ECS_CLUSTER: augentik-staging-ecs-cluster
  ECS_SERVICE: augentik-staging-ecs-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Extract version metadata
        id: meta
        shell: bash
        run: |
          echo "IMAGE_TAG=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          echo "TIMESTAMP=$(date -u +%Y%m%dT%H%M%S)" >> "$GITHUB_OUTPUT"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build backend image
        run: |
          docker build \
            --file Dockerfile \
            --tag ${{ steps.meta.outputs.IMAGE_TAG }} \
            --build-arg BUILD_TIMESTAMP=${{ steps.meta.outputs.TIMESTAMP }} \
            .

      - name: Tag image with ECR repository URI
        shell: bash
        run: |
          ECR_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"
          docker tag ${{ steps.meta.outputs.IMAGE_TAG }} "$ECR_URI:${{ steps.meta.outputs.IMAGE_TAG }}"
          docker tag ${{ steps.meta.outputs.IMAGE_TAG }} "$ECR_URI:latest"
          echo "ECR_URI=$ECR_URI" >> "$GITHUB_ENV"

      - name: Push image to ECR
        run: |
          docker push "$ECR_URI:${{ steps.meta.outputs.IMAGE_TAG }}"
          docker push "$ECR_URI:latest"

      - name: Render task definition
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskdef.json
          container-name: augentik-backend
          image: ${{ env.ECR_URI }}:${{ steps.meta.outputs.IMAGE_TAG }}

      - name: Deploy ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Emit deployment summary
        run: |
          echo "## Deployment Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "* Cluster: ${{ env.ECS_CLUSTER }}" >> "$GITHUB_STEP_SUMMARY"
          echo "* Service: ${{ env.ECS_SERVICE }}" >> "$GITHUB_STEP_SUMMARY"
          echo "* Image: ${{ env.ECR_URI }}:${{ steps.meta.outputs.IMAGE_TAG }}" >> "$GITHUB_STEP_SUMMARY"
