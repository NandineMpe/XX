import{m as J}from"./chunk-353BL4L5-BbApztrK-BFwAI_WD.js";import{e as X}from"./chunk-AACKK3MU-C1qInySM-DREz8VAe.js";import{g as m,P as Z,O as rr,r as tr,C as er,t as or,u as nr,I as w,x as ar,y as cr,N as ir,a2 as sr,W as dr,G as k,a3 as hr,a4 as $r,a5 as mr,a6 as lr}from"./index-BiAzcFFh.js";import{w as yr}from"./treemap-75Q7IDZK-DCNj2AqJ-i-PV0SKi.js";import"./_baseUniq-C8e369Jq-uhOzPqtn.js";import"./_basePickBy-I_8Sje-O-DG8Muyav.js";import"./clone-BnhFz35D-pztuzbSK.js";var f={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},gr=mr.gitGraph,O=m(()=>hr({...gr,...$r().gitGraph}),"getConfig"),s=new X(()=>{const t=O(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function D(){return lr({length:7})}m(D,"getID");function F(t,r){const e=Object.create(null);return t.reduce((a,c)=>{const i=r(c);return e[i]||(e[i]=!0,a.push(c)),a},[])}m(F,"uniqBy");var pr=m(function(t){s.records.direction=t},"setDirection"),ur=m(function(t){w.debug("options str",t),t=t?.trim(),t=t||"{}";try{s.records.options=JSON.parse(t)}catch(r){w.error("error while parsing gitGraph options",r.message)}},"setOptions"),xr=m(function(){return s.records.options},"getOptions"),fr=m(function(t){let r=t.msg,e=t.id;const a=t.type;let c=t.tags;w.info("commit",r,e,a,c),w.debug("Entering commit:",r,e,a,c);const i=O();e=k.sanitizeText(e,i),r=k.sanitizeText(r,i),c=c?.map(h=>k.sanitizeText(h,i));const d={id:e||s.records.seq+"-"+D(),message:r,seq:s.records.seq++,type:a??f.NORMAL,tags:c??[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=d,w.info("main branch",i.mainBranchName),s.records.commits.has(d.id)&&w.warn(`Commit ID ${d.id} already exists`),s.records.commits.set(d.id,d),s.records.branches.set(s.records.currBranch,d.id),w.debug("in pushCommit "+d.id)},"commit"),br=m(function(t){let r=t.name;const e=t.order;if(r=k.sanitizeText(r,O()),s.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);s.records.branches.set(r,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(r,{name:r,order:e}),K(r),w.debug("in createBranch")},"branch"),wr=m(t=>{let r=t.branch,e=t.id;const a=t.type,c=t.tags,i=O();r=k.sanitizeText(r,i),e&&(e=k.sanitizeText(e,i));const d=s.records.branches.get(s.records.currBranch),h=s.records.branches.get(r),l=d?s.records.commits.get(d):void 0,o=h?s.records.commits.get(h):void 0;if(l&&o&&l.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(s.records.currBranch===r){const $=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},$}if(l===void 0||!l){const $=new Error(`Incorrect usage of "merge". Current branch (${s.records.currBranch})has no commits`);throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},$}if(!s.records.branches.has(r)){const $=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},$}if(o===void 0||!o){const $=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},$}if(l===o){const $=new Error('Incorrect usage of "merge". Both branches have same head');throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},$}if(e&&s.records.commits.has(e)){const $=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom id");throw $.hash={text:`merge ${r} ${e} ${a} ${c?.join(" ")}`,token:`merge ${r} ${e} ${a} ${c?.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${a} ${c?.join(" ")}`]},$}const n=h||"",x={id:e||`${s.records.seq}-${D()}`,message:`merged branch ${r} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,n],branch:s.records.currBranch,type:f.MERGE,customType:a,customId:!!e,tags:c??[]};s.records.head=x,s.records.commits.set(x.id,x),s.records.branches.set(s.records.currBranch,x.id),w.debug(s.records.branches),w.debug("in mergeBranch")},"merge"),Br=m(function(t){let r=t.id,e=t.targetId,a=t.tags,c=t.parent;w.debug("Entering cherryPick:",r,e,a);const i=O();if(r=k.sanitizeText(r,i),e=k.sanitizeText(e,i),a=a?.map(l=>k.sanitizeText(l,i)),c=k.sanitizeText(c,i),!r||!s.records.commits.has(r)){const l=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw l.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},l}const d=s.records.commits.get(r);if(d===void 0||!d)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(c&&!(Array.isArray(d.parents)&&d.parents.includes(c)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const h=d.branch;if(d.type===f.MERGE&&!c)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!e||!s.records.commits.has(e)){if(h===s.records.currBranch){const x=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw x.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},x}const l=s.records.branches.get(s.records.currBranch);if(l===void 0||!l){const x=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw x.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},x}const o=s.records.commits.get(l);if(o===void 0||!o){const x=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw x.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},x}const n={id:s.records.seq+"-"+D(),message:`cherry-picked ${d?.message} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,d.id],branch:s.records.currBranch,type:f.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${d.id}${d.type===f.MERGE?`|parent:${c}`:""}`]};s.records.head=n,s.records.commits.set(n.id,n),s.records.branches.set(s.records.currBranch,n.id),w.debug(s.records.branches),w.debug("in cherryPick")}},"cherryPick"),K=m(function(t){if(t=k.sanitizeText(t,O()),s.records.branches.has(t)){s.records.currBranch=t;const r=s.records.branches.get(s.records.currBranch);r===void 0||!r?s.records.head=null:s.records.head=s.records.commits.get(r)??null}else{const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}},"checkout");function N(t,r,e){const a=t.indexOf(r);a===-1?t.push(e):t.splice(a,1,e)}m(N,"upsert");function W(t){const r=t.reduce((c,i)=>c.seq>i.seq?c:i,t[0]);let e="";t.forEach(function(c){c===r?e+="	*":e+="	|"});const a=[e,r.id,r.seq];for(const c in s.records.branches)s.records.branches.get(c)===r.id&&a.push(c);if(w.debug(a.join(" ")),r.parents&&r.parents.length==2&&r.parents[0]&&r.parents[1]){const c=s.records.commits.get(r.parents[0]);N(t,r,c),r.parents[1]&&t.push(s.records.commits.get(r.parents[1]))}else{if(r.parents.length==0)return;if(r.parents[0]){const c=s.records.commits.get(r.parents[0]);N(t,r,c)}}t=F(t,c=>c.id),W(t)}m(W,"prettyPrintCommitHistory");var Er=m(function(){w.debug(s.records.commits);const t=Y()[0];W([t])},"prettyPrint"),vr=m(function(){s.reset(),dr()},"clear"),Cr=m(function(){return[...s.records.branchConfig.values()].map((t,r)=>t.order!==null&&t.order!==void 0?t:{...t,order:parseFloat(`0.${r}`)}).sort((t,r)=>(t.order??0)-(r.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),kr=m(function(){return s.records.branches},"getBranches"),Lr=m(function(){return s.records.commits},"getCommits"),Y=m(function(){const t=[...s.records.commits.values()];return t.forEach(function(r){w.debug(r.id)}),t.sort((r,e)=>r.seq-e.seq),t},"getCommitsArray"),Tr=m(function(){return s.records.currBranch},"getCurrentBranch"),Mr=m(function(){return s.records.direction},"getDirection"),Pr=m(function(){return s.records.head},"getHead"),V={commitType:f,getConfig:O,setDirection:pr,setOptions:ur,getOptions:xr,commit:fr,branch:br,merge:wr,cherryPick:Br,checkout:K,prettyPrint:Er,clear:vr,getBranchesAsObjArray:Cr,getBranches:kr,getCommits:Lr,getCommitsArray:Y,getCurrentBranch:Tr,getDirection:Mr,getHead:Pr,setAccTitle:nr,getAccTitle:or,getAccDescription:er,setAccDescription:tr,setDiagramTitle:rr,getDiagramTitle:Z},Rr=m((t,r)=>{J(t,r),t.dir&&r.setDirection(t.dir);for(const e of t.statements)Ir(e,r)},"populate"),Ir=m((t,r)=>{const e={Commit:m(a=>r.commit(Ar(a)),"Commit"),Branch:m(a=>r.branch(Gr(a)),"Branch"),Merge:m(a=>r.merge(Or(a)),"Merge"),Checkout:m(a=>r.checkout(qr(a)),"Checkout"),CherryPicking:m(a=>r.cherryPick(Hr(a)),"CherryPicking")}[t.$type];e?e(t):w.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),Ar=m(t=>({id:t.id,msg:t.message??"",type:t.type!==void 0?f[t.type]:f.NORMAL,tags:t.tags??void 0}),"parseCommit"),Gr=m(t=>({name:t.name,order:t.order??0}),"parseBranch"),Or=m(t=>({branch:t.branch,id:t.id??"",type:t.type!==void 0?f[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),qr=m(t=>t.branch,"parseCheckout"),Hr=m(t=>{var r;return{id:t.id,targetId:"",tags:((r=t.tags)==null?void 0:r.length)===0?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),zr={parse:m(async t=>{const r=await yr("gitGraph",t);w.debug(r),Rr(r,V)},"parse")},j=ar(),E=j?.gitGraph,I=10,A=40,L=4,M=2,G=8,v=new Map,C=new Map,z=30,q=new Map,S=[],R=0,u="LR",Sr=m(()=>{v.clear(),C.clear(),q.clear(),R=0,S=[],u="LR"},"clear"),Q=m(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof t=="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(e=>{const a=document.createElementNS("http://www.w3.org/2000/svg","tspan");a.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),a.setAttribute("dy","1em"),a.setAttribute("x","0"),a.setAttribute("class","row"),a.textContent=e.trim(),r.appendChild(a)}),r},"drawText"),U=m(t=>{let r,e,a;return u==="BT"?(e=m((c,i)=>c<=i,"comparisonFunc"),a=1/0):(e=m((c,i)=>c>=i,"comparisonFunc"),a=0),t.forEach(c=>{var i,d;const h=u==="TB"||u=="BT"?(i=C.get(c))==null?void 0:i.y:(d=C.get(c))==null?void 0:d.x;h!==void 0&&e(h,a)&&(r=c,a=h)}),r},"findClosestParent"),Dr=m(t=>{let r="",e=1/0;return t.forEach(a=>{const c=C.get(a).y;c<=e&&(r=a,e=c)}),r||void 0},"findClosestParentBT"),Nr=m((t,r,e)=>{let a=e,c=e;const i=[];t.forEach(d=>{const h=r.get(d);if(!h)throw new Error(`Commit not found for key ${d}`);h.parents.length?(a=jr(h),c=Math.max(a,c)):i.push(h),_r(h,a)}),a=c,i.forEach(d=>{Fr(d,a,e)}),t.forEach(d=>{const h=r.get(d);if(h!=null&&h.parents.length){const l=Dr(h.parents);a=C.get(l).y-A,a<=c&&(c=a);const o=v.get(h.branch).pos,n=a-I;C.set(h.id,{x:o,y:n})}})},"setParallelBTPos"),Wr=m(t=>{var r;const e=U(t.parents.filter(c=>c!==null));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);const a=(r=C.get(e))==null?void 0:r.y;if(a===void 0)throw new Error(`Closest parent position not found for commit ${t.id}`);return a},"findClosestParentPos"),jr=m(t=>Wr(t)+A,"calculateCommitPosition"),_r=m((t,r)=>{const e=v.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const a=e.pos,c=r+I;return C.set(t.id,{x:a,y:c}),{x:a,y:c}},"setCommitPosition"),Fr=m((t,r,e)=>{const a=v.get(t.branch);if(!a)throw new Error(`Branch not found for commit ${t.id}`);const c=r+e,i=a.pos;C.set(t.id,{x:i,y:c})},"setRootPosition"),Kr=m((t,r,e,a,c,i)=>{if(i===f.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${c%G} ${a}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${c%G} ${a}-inner`);else if(i===f.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${a}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${a}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${a}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${a}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${a}`);else{const d=t.append("circle");if(d.attr("cx",e.x),d.attr("cy",e.y),d.attr("r",r.type===f.MERGE?9:10),d.attr("class",`commit ${r.id} commit${c%G}`),i===f.MERGE){const h=t.append("circle");h.attr("cx",e.x),h.attr("cy",e.y),h.attr("r",6),h.attr("class",`commit ${a} ${r.id} commit${c%G}`)}i===f.REVERSE&&t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${a} ${r.id} commit${c%G}`)}},"drawCommitBullet"),Yr=m((t,r,e,a)=>{var c;if(r.type!==f.CHERRY_PICK&&(r.customId&&r.type===f.MERGE||r.type!==f.MERGE)&&E!=null&&E.showCommitLabel){const i=t.append("g"),d=i.insert("rect").attr("class","commit-label-bkg"),h=i.append("text").attr("x",a).attr("y",e.y+25).attr("class","commit-label").text(r.id),l=(c=h.node())==null?void 0:c.getBBox();if(l&&(d.attr("x",e.posWithOffset-l.width/2-M).attr("y",e.y+13.5).attr("width",l.width+2*M).attr("height",l.height+2*M),u==="TB"||u==="BT"?(d.attr("x",e.x-(l.width+4*L+5)).attr("y",e.y-12),h.attr("x",e.x-(l.width+4*L)).attr("y",e.y+l.height-12)):h.attr("x",e.posWithOffset-l.width/2),E.rotateCommitLabel))if(u==="TB"||u==="BT")h.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),d.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const o=-7.5-(l.width+10)/25*9.5,n=10+l.width/25*8.5;i.attr("transform","translate("+o+", "+n+") rotate(-45, "+a+", "+e.y+")")}}},"drawCommitLabel"),Vr=m((t,r,e,a)=>{var c;if(r.tags.length>0){let i=0,d=0,h=0;const l=[];for(const o of r.tags.reverse()){const n=t.insert("polygon"),x=t.append("circle"),$=t.append("text").attr("y",e.y-16-i).attr("class","tag-label").text(o),y=(c=$.node())==null?void 0:c.getBBox();if(!y)throw new Error("Tag bbox not found");d=Math.max(d,y.width),h=Math.max(h,y.height),$.attr("x",e.posWithOffset-y.width/2),l.push({tag:$,hole:x,rect:n,yOffset:i}),i+=20}for(const{tag:o,hole:n,rect:x,yOffset:$}of l){const y=h/2,p=e.y-19.2-$;if(x.attr("class","tag-label-bkg").attr("points",`
      ${a-d/2-L/2},${p+M}
      ${a-d/2-L/2},${p-M}
      ${e.posWithOffset-d/2-L},${p-y-M}
      ${e.posWithOffset+d/2+L},${p-y-M}
      ${e.posWithOffset+d/2+L},${p+y+M}
      ${e.posWithOffset-d/2-L},${p+y+M}`),n.attr("cy",p).attr("cx",a-d/2+L/2).attr("r",1.5).attr("class","tag-hole"),u==="TB"||u==="BT"){const g=a+$;x.attr("class","tag-label-bkg").attr("points",`
        ${e.x},${g+2}
        ${e.x},${g-2}
        ${e.x+I},${g-y-2}
        ${e.x+I+d+4},${g-y-2}
        ${e.x+I+d+4},${g+y+2}
        ${e.x+I},${g+y+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+a+")"),n.attr("cx",e.x+L/2).attr("cy",g).attr("transform","translate(12,12) rotate(45, "+e.x+","+a+")"),o.attr("x",e.x+5).attr("y",g+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+a+")")}}}},"drawCommitTags"),Qr=m(t=>{switch(t.customType??t.type){case f.NORMAL:return"commit-normal";case f.REVERSE:return"commit-reverse";case f.HIGHLIGHT:return"commit-highlight";case f.MERGE:return"commit-merge";case f.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Ur=m((t,r,e,a)=>{const c={x:0,y:0};if(t.parents.length>0){const i=U(t.parents);if(i){const d=a.get(i)??c;return r==="TB"?d.y+A:r==="BT"?(a.get(t.id)??c).y-A:d.x+A}}else return r==="TB"?z:r==="BT"?(a.get(t.id)??c).y-A:0;return 0},"calculatePosition"),Jr=m((t,r,e)=>{var a,c;const i=u==="BT"&&e?r:r+I,d=u==="TB"||u==="BT"?i:(a=v.get(t.branch))==null?void 0:a.pos,h=u==="TB"||u==="BT"?(c=v.get(t.branch))==null?void 0:c.pos:i;if(h===void 0||d===void 0)throw new Error(`Position were undefined for commit ${t.id}`);return{x:h,y:d,posWithOffset:i}},"getCommitPosition"),_=m((t,r,e)=>{if(!E)throw new Error("GitGraph config not found");const a=t.append("g").attr("class","commit-bullets"),c=t.append("g").attr("class","commit-labels");let i=u==="TB"||u==="BT"?z:0;const d=[...r.keys()],h=E?.parallelCommits??!1,l=m((n,x)=>{var $,y;const p=($=r.get(n))==null?void 0:$.seq,g=(y=r.get(x))==null?void 0:y.seq;return p!==void 0&&g!==void 0?p-g:0},"sortKeys");let o=d.sort(l);u==="BT"&&(h&&Nr(o,r,i),o=o.reverse()),o.forEach(n=>{var x;const $=r.get(n);if(!$)throw new Error(`Commit not found for key ${n}`);h&&(i=Ur($,u,i,C));const y=Jr($,i,h);if(e){const p=Qr($),g=$.customType??$.type,T=((x=v.get($.branch))==null?void 0:x.index)??0;Kr(a,$,y,p,T,g),Yr(c,$,y,i),Vr(c,$,y,i)}u==="TB"||u==="BT"?C.set($.id,{x:y.x,y:y.posWithOffset}):C.set($.id,{x:y.posWithOffset,y:y.y}),i=u==="BT"&&h?i+A:i+A+I,i>R&&(R=i)})},"drawCommits"),Xr=m((t,r,e,a,c)=>{const i=(u==="TB"||u==="BT"?e.x<a.x:e.y<a.y)?r.branch:t.branch,d=m(l=>l.branch===i,"isOnBranchToGetCurve"),h=m(l=>l.seq>t.seq&&l.seq<r.seq,"isBetweenCommits");return[...c.values()].some(l=>h(l)&&d(l))},"shouldRerouteArrow"),H=m((t,r,e=0)=>{const a=t+Math.abs(t-r)/2;if(e>5)return a;if(S.every(i=>Math.abs(i-a)>=10))return S.push(a),a;const c=Math.abs(t-r);return H(t,r-c/5,e+1)},"findLane"),Zr=m((t,r,e,a)=>{var c,i,d,h,l;const o=C.get(r.id),n=C.get(e.id);if(o===void 0||n===void 0)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const x=Xr(r,e,o,n,a);let $="",y="",p=0,g=0,T=(c=v.get(e.branch))==null?void 0:c.index;e.type===f.MERGE&&r.id!==e.parents[0]&&(T=(i=v.get(r.branch))==null?void 0:i.index);let b;if(x){$="A 10 10, 0, 0, 0,",y="A 10 10, 0, 0, 1,",p=10,g=10;const P=o.y<n.y?H(o.y,n.y):H(n.y,o.y),B=o.x<n.x?H(o.x,n.x):H(n.x,o.x);u==="TB"?o.x<n.x?b=`M ${o.x} ${o.y} L ${B-p} ${o.y} ${y} ${B} ${o.y+g} L ${B} ${n.y-p} ${$} ${B+g} ${n.y} L ${n.x} ${n.y}`:(T=(d=v.get(r.branch))==null?void 0:d.index,b=`M ${o.x} ${o.y} L ${B+p} ${o.y} ${$} ${B} ${o.y+g} L ${B} ${n.y-p} ${y} ${B-g} ${n.y} L ${n.x} ${n.y}`):u==="BT"?o.x<n.x?b=`M ${o.x} ${o.y} L ${B-p} ${o.y} ${$} ${B} ${o.y-g} L ${B} ${n.y+p} ${y} ${B+g} ${n.y} L ${n.x} ${n.y}`:(T=(h=v.get(r.branch))==null?void 0:h.index,b=`M ${o.x} ${o.y} L ${B+p} ${o.y} ${y} ${B} ${o.y-g} L ${B} ${n.y+p} ${$} ${B-g} ${n.y} L ${n.x} ${n.y}`):o.y<n.y?b=`M ${o.x} ${o.y} L ${o.x} ${P-p} ${$} ${o.x+g} ${P} L ${n.x-p} ${P} ${y} ${n.x} ${P+g} L ${n.x} ${n.y}`:(T=(l=v.get(r.branch))==null?void 0:l.index,b=`M ${o.x} ${o.y} L ${o.x} ${P+p} ${y} ${o.x+g} ${P} L ${n.x-p} ${P} ${$} ${n.x} ${P-g} L ${n.x} ${n.y}`)}else $="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,g=20,u==="TB"?(o.x<n.x&&(e.type===f.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${$} ${o.x+g} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${y} ${n.x} ${o.y+g} L ${n.x} ${n.y}`),o.x>n.x&&($="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,g=20,e.type===f.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${y} ${o.x-g} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x+p} ${o.y} ${$} ${n.x} ${o.y+g} L ${n.x} ${n.y}`),o.x===n.x&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`)):u==="BT"?(o.x<n.x&&(e.type===f.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${y} ${o.x+g} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${$} ${n.x} ${o.y-g} L ${n.x} ${n.y}`),o.x>n.x&&($="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,g=20,e.type===f.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${$} ${o.x-g} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${$} ${n.x} ${o.y-g} L ${n.x} ${n.y}`),o.x===n.x&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`)):(o.y<n.y&&(e.type===f.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${y} ${n.x} ${o.y+g} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${$} ${o.x+g} ${n.y} L ${n.x} ${n.y}`),o.y>n.y&&(e.type===f.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${$} ${n.x} ${o.y-g} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${y} ${o.x+g} ${n.y} L ${n.x} ${n.y}`),o.y===n.y&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`));if(b===void 0)throw new Error("Line definition not found");t.append("path").attr("d",b).attr("class","arrow arrow"+T%G)},"drawArrow"),rt=m((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(a=>{const c=r.get(a);c.parents&&c.parents.length>0&&c.parents.forEach(i=>{Zr(e,r.get(i),c,r)})})},"drawArrows"),tt=m((t,r)=>{const e=t.append("g");r.forEach((a,c)=>{var i;const d=c%G,h=(i=v.get(a.name))==null?void 0:i.pos;if(h===void 0)throw new Error(`Position not found for branch ${a.name}`);const l=e.append("line");l.attr("x1",0),l.attr("y1",h),l.attr("x2",R),l.attr("y2",h),l.attr("class","branch branch"+d),u==="TB"?(l.attr("y1",z),l.attr("x1",h),l.attr("y2",R),l.attr("x2",h)):u==="BT"&&(l.attr("y1",R),l.attr("x1",h),l.attr("y2",z),l.attr("x2",h)),S.push(h);const o=a.name,n=Q(o),x=e.insert("rect"),$=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+d);$.node().appendChild(n);const y=n.getBBox();x.attr("class","branchLabelBkg label"+d).attr("rx",4).attr("ry",4).attr("x",-y.width-4-(E?.rotateCommitLabel===!0?30:0)).attr("y",-y.height/2+8).attr("width",y.width+18).attr("height",y.height+4),$.attr("transform","translate("+(-y.width-14-(E?.rotateCommitLabel===!0?30:0))+", "+(h-y.height/2-1)+")"),u==="TB"?(x.attr("x",h-y.width/2-10).attr("y",0),$.attr("transform","translate("+(h-y.width/2-5)+", 0)")):u==="BT"?(x.attr("x",h-y.width/2-10).attr("y",R),$.attr("transform","translate("+(h-y.width/2-5)+", "+R+")")):x.attr("transform","translate(-19, "+(h-y.height/2)+")")})},"drawBranches"),et=m(function(t,r,e,a,c){return v.set(t,{pos:r,index:e}),r+=50+(c?40:0)+(u==="TB"||u==="BT"?a.width/2:0),r},"setBranchPosition"),ot=m(function(t,r,e,a){if(Sr(),w.debug("in gitgraph renderer",t+`
`,"id:",r,e),!E)throw new Error("GitGraph config not found");const c=E.rotateCommitLabel??!1,i=a.db;q=i.getCommits();const d=i.getBranchesAsObjArray();u=i.getDirection();const h=cr(`[id="${r}"]`);let l=0;d.forEach((o,n)=>{var x;const $=Q(o.name),y=h.append("g"),p=y.insert("g").attr("class","branchLabel"),g=p.insert("g").attr("class","label branch-label");(x=g.node())==null||x.appendChild($);const T=$.getBBox();l=et(o.name,l,n,T,c),g.remove(),p.remove(),y.remove()}),_(h,q,!1),E.showBranches&&tt(h,d),rt(h,q),_(h,q,!0),ir.insertTitle(h,"gitTitleText",E.titleTopMargin??0,i.getDiagramTitle()),sr(void 0,h,E.diagramPadding,E.useMaxWidth)},"draw"),nt={draw:ot},at=m(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(r=>`
        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }
        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }
        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }
        .label${r}  { fill: ${t["git"+r]}; }
        .arrow${r} { stroke: ${t["git"+r]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles"),ct=at,yt={parser:zr,db:V,renderer:nt,styles:ct};export{yt as diagram};
