import{d as se}from"./chunk-SKB7J2MH-DlJa3Xde-DqknVtwY.js";import{g as h,a3 as X,a4 as U,at as re,L as ne,bJ as M,I,ax as B,bK as oe,bL as ie,bM as v,y as E,u as ce,t as de,O as pe,P as he,C as me,r as ye,a5 as fe,bN as ue,W as Se}from"./index-Zqm4nf2g.js";import{m as ge}from"./chunk-353BL4L5-BbApztrK-qF-1cEoM.js";import{w as xe}from"./treemap-75Q7IDZK-DCNj2AqJ-ChjCU2Gy.js";import"./_baseUniq-C8e369Jq-seL6oVtR.js";import"./_basePickBy-I_8Sje-O-D2So5OuJ.js";import"./clone-BnhFz35D-DEPweGoY.js";var H,Y=(H=class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=ce,this.getAccTitle=de,this.setDiagramTitle=pe,this.getDiagramTitle=he,this.getAccDescription=me,this.setAccDescription=ye}getNodes(){return this.nodes}getConfig(){const s=fe,a=U();return X({...s.treemap,...a.treemap??{}})}addNode(s,a){this.nodes.push(s),this.levels.set(s,a),a===0&&(this.outerNodes.push(s),this.root??(this.root=s))}getRoot(){return{name:"",children:this.outerNodes}}addClass(s,a){const r=this.classes.get(s)??{id:s,styles:[],textStyles:[]},o=a.replace(/\\,/g,"§§§").replace(/,/g,";").replace(/§§§/g,",").split(";");o&&o.forEach(c=>{ue(c)&&(r!=null&&r.textStyles?r.textStyles.push(c):r.textStyles=[c]),r!=null&&r.styles?r.styles.push(c):r.styles=[c]}),this.classes.set(s,r)}getClasses(){return this.classes}getStylesForClass(s){var a;return((a=this.classes.get(s))==null?void 0:a.styles)??[]}clear(){Se(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}},h(H,"TreeMapDB"),H);function Z(s){if(!s.length)return[];const a=[],r=[];return s.forEach(o=>{const c={name:o.name,children:o.type==="Leaf"?void 0:[]};for(c.classSelector=o?.classSelector,o!=null&&o.cssCompiledStyles&&(c.cssCompiledStyles=[o.cssCompiledStyles]),o.type==="Leaf"&&o.value!==void 0&&(c.value=o.value);r.length>0&&r[r.length-1].level>=o.level;)r.pop();if(r.length===0)a.push(c);else{const n=r[r.length-1].node;n.children?n.children.push(c):n.children=[c]}o.type!=="Leaf"&&r.push({node:c,level:o.level})}),a}h(Z,"buildHierarchy");var be=h((s,a)=>{ge(s,a);const r=[];for(const n of s.TreemapRows??[])n.$type==="ClassDefStatement"&&a.addClass(n.className??"",n.styleText??"");for(const n of s.TreemapRows??[]){const p=n.item;if(!p)continue;const m=n.indent?parseInt(n.indent):0,N=Ce(p),l=p.classSelector?a.getStylesForClass(p.classSelector):[],w=l.length>0?l.join(";"):void 0,b={level:m,name:N,type:p.$type,value:p.value,classSelector:p.classSelector,cssCompiledStyles:w};r.push(b)}const o=Z(r),c=h((n,p)=>{for(const m of n)a.addNode(m,p),m.children&&m.children.length>0&&c(m.children,p+1)},"addNodesRecursively");c(o,0)},"populate"),Ce=h(s=>s.name?String(s.name):"","getItemName"),_={parser:{yy:void 0},parse:h(async s=>{var a;try{const r=await xe("treemap",s);I.debug("Treemap AST:",r);const o=(a=_.parser)==null?void 0:a.yy;if(!(o instanceof Y))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");be(r,o)}catch(r){throw I.error("Error parsing treemap:",r),r}},"parse")},ve=10,$=10,F=25,$e=h((s,a,r,o)=>{const c=o.db,n=c.getConfig(),p=n.padding??ve,m=c.getDiagramTitle(),N=c.getRoot(),{themeVariables:l}=U();if(!N)return;const w=m?30:0,b=re(a),j=n.nodeWidth?n.nodeWidth*$:960,G=n.nodeHeight?n.nodeHeight*$:500,R=j,J=G+w;b.attr("viewBox",`0 0 ${R} ${J}`),ne(b,J,R,n.useMaxWidth);let C;try{const e=n.valueFormat||",";if(e==="$0,0")C=h(t=>"$"+M(",")(t),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){const t=/\.\d+/.exec(e),d=t?t[0]:"";C=h(y=>"$"+M(","+d)(y),"valueFormat")}else if(e.startsWith("$")){const t=e.substring(1);C=h(d=>"$"+M(t||"")(d),"valueFormat")}else C=M(e)}catch(e){I.error("Error creating format function:",e),C=M(",")}const L=B().range(["transparent",l.cScale0,l.cScale1,l.cScale2,l.cScale3,l.cScale4,l.cScale5,l.cScale6,l.cScale7,l.cScale8,l.cScale9,l.cScale10,l.cScale11]),q=B().range(["transparent",l.cScalePeer0,l.cScalePeer1,l.cScalePeer2,l.cScalePeer3,l.cScalePeer4,l.cScalePeer5,l.cScalePeer6,l.cScalePeer7,l.cScalePeer8,l.cScalePeer9,l.cScalePeer10,l.cScalePeer11]),P=B().range([l.cScaleLabel0,l.cScaleLabel1,l.cScaleLabel2,l.cScaleLabel3,l.cScaleLabel4,l.cScaleLabel5,l.cScaleLabel6,l.cScaleLabel7,l.cScaleLabel8,l.cScaleLabel9,l.cScaleLabel10,l.cScaleLabel11]);m&&b.append("text").attr("x",R/2).attr("y",w/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(m);const O=b.append("g").attr("transform",`translate(0, ${w})`).attr("class","treemapContainer"),ee=oe(N).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),K=ie().size([j,G]).paddingTop(e=>e.children&&e.children.length>0?F+$:0).paddingInner(p).paddingLeft(e=>e.children&&e.children.length>0?$:0).paddingRight(e=>e.children&&e.children.length>0?$:0).paddingBottom(e=>e.children&&e.children.length>0?$:0).round(!0)(ee),te=K.descendants().filter(e=>e.children&&e.children.length>0),k=O.selectAll(".treemapSection").data(te).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);k.append("rect").attr("width",e=>e.x1-e.x0).attr("height",F).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>e.depth===0?"display: none;":""),k.append("clipPath").attr("id",(e,t)=>`clip-section-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",F),k.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>L(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>q(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(e.depth===0)return"display: none;";const t=v({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),k.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",F/2).attr("dominant-baseline","middle").text(e=>e.depth===0?"":e.data.name).attr("font-weight","bold").attr("style",e=>{if(e.depth===0)return"display: none;";const t="dominant-baseline: middle; font-size: 12px; fill:"+P(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",d=v({cssCompiledStyles:e.data.cssCompiledStyles});return t+d.labelStyles.replace("color:","fill:")}).each(function(e){if(e.depth===0)return;const t=E(this),d=e.data.name;t.text(d);const y=e.x1-e.x0,S=6;let g;n.showValues!==!1&&e.value?g=y-10-30-10-S:g=y-S-6;const u=Math.max(15,g),f=t.node();if(f.getComputedTextLength()>u){let i=d;for(;i.length>0;){if(i=d.substring(0,i.length-1),i.length===0){t.text("..."),f.getComputedTextLength()>u&&t.text("");break}if(t.text(i+"..."),f.getComputedTextLength()<=u)break}}}),n.showValues!==!1&&k.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",F/2).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?C(e.value):"").attr("font-style","italic").attr("style",e=>{if(e.depth===0)return"display: none;";const t="text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+P(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",d=v({cssCompiledStyles:e.data.cssCompiledStyles});return t+d.labelStyles.replace("color:","fill:")});const ae=K.leaves(),W=O.selectAll(".treemapLeafGroup").data(ae).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);W.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>e.parent?L(e.parent.data.name):L(e.data.name)).attr("style",e=>v({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>e.parent?L(e.parent.data.name):L(e.data.name)).attr("stroke-width",3),W.append("clipPath").attr("id",(e,t)=>`clip-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),W.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>{const t="text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+P(e.data.name)+";",d=v({cssCompiledStyles:e.data.cssCompiledStyles});return t+d.labelStyles.replace("color:","fill:")}).attr("clip-path",(e,t)=>`url(#clip-${a}-${t})`).text(e=>e.data.name).each(function(e){const t=E(this),d=e.x1-e.x0,y=e.y1-e.y0,S=t.node(),g=4,u=d-2*g,f=y-2*g;if(u<10||f<10){t.style("display","none");return}let i=parseInt(t.style("font-size"),10);const x=8,T=28,A=.6,z=6,V=2;for(;S.getComputedTextLength()>u&&i>x;)i--,t.style("font-size",`${i}px`);let D=Math.max(z,Math.min(T,Math.round(i*A))),Q=i+V+D;for(;Q>f&&i>x&&(i--,D=Math.max(z,Math.min(T,Math.round(i*A))),!(D<z&&i===x));)t.style("font-size",`${i}px`),Q=i+V+D;t.style("font-size",`${i}px`),(S.getComputedTextLength()>u||i<x||f<i)&&t.style("display","none")}),n.showValues!==!1&&W.append("text").attr("class","treemapValue").attr("x",e=>(e.x1-e.x0)/2).attr("y",function(e){return(e.y1-e.y0)/2}).attr("style",e=>{const t="text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+P(e.data.name)+";",d=v({cssCompiledStyles:e.data.cssCompiledStyles});return t+d.labelStyles.replace("color:","fill:")}).attr("clip-path",(e,t)=>`url(#clip-${a}-${t})`).text(e=>e.value?C(e.value):"").each(function(e){const t=E(this),d=this.parentNode;if(!d){t.style("display","none");return}const y=E(d).select(".treemapLabel");if(y.empty()||y.style("display")==="none"){t.style("display","none");return}const S=parseFloat(y.style("font-size")),g=28,u=.6,f=6,i=2,x=Math.max(f,Math.min(g,Math.round(S*u)));t.style("font-size",`${x}px`);const T=(e.y1-e.y0)/2+S/2+i;t.attr("y",T);const A=e.x1-e.x0,z=e.y1-e.y0-4,V=A-8;t.node().getComputedTextLength()>V||T+x>z||x<f?t.style("display","none"):t.style("display",null)});const le=n.diagramPadding??8;se(b,le,"flowchart",n?.useMaxWidth||!1)},"draw"),we=h(function(s,a){return a.db.getClasses()},"getClasses"),Le={draw:$e,getClasses:we},ke={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},Te=h(({treemap:s}={})=>{const a=X(ke,s);return`
  .treemapNode.section {
    stroke: ${a.sectionStrokeColor};
    stroke-width: ${a.sectionStrokeWidth};
    fill: ${a.sectionFillColor};
  }
  .treemapNode.leaf {
    stroke: ${a.leafStrokeColor};
    stroke-width: ${a.leafStrokeWidth};
    fill: ${a.leafFillColor};
  }
  .treemapLabel {
    fill: ${a.labelColor};
    font-size: ${a.labelFontSize};
  }
  .treemapValue {
    fill: ${a.valueColor};
    font-size: ${a.valueFontSize};
  }
  .treemapTitle {
    fill: ${a.titleColor};
    font-size: ${a.titleFontSize};
  }
  `},"getStyles"),ze=Te,De={parser:_,get db(){return new Y},renderer:Le,styles:ze};export{De as diagram};
